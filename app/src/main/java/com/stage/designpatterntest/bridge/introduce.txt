Birdge模式（桥梁模式）
	
	问题分析：
	设想要绘制一幅图画，蓝天、白云、绿树、小鸟，如果画面尺寸很大，那么用蜡笔绘制就会遇到点麻烦。
	毕竟细细的蜡笔要涂出一片蓝天，是有些麻烦。如果 有可能，最好有套大号蜡笔，粗粗的蜡笔很快能涂抹完成。
	至于色彩吗，最好每种颜色来支粗的，除了蓝天还有绿地呢。这样，如果一套12种颜色的蜡笔，我们需 要两套24支，
	同种颜色的一粗一细。呵呵，画还没画，开始做梦了：要是再有一套中号蜡笔就更好了，这样，不多不少总共36支蜡笔。
	
	再看看毛笔这一边，居然如此简陋：一套水彩12色，外加大中小三支毛笔。你可别小瞧这"简陋"的组合，
	画蓝天用大毛笔，画小鸟用小毛笔，各具特色。
	
	这个时候我们就将画笔和颜料解偶了，我们现在就可以独立的操作画笔和颜料类
	我们可以随意增加画笔而不用去管颜料
	我们也可以随意增加颜料而不用关心画笔
	这就是桥梁模式最大的优点


	适用性
    1）. 你不希望在抽象和他的实现部分之间有一个固定的邦定关系，如在程序的运行时刻实现部分应该可以被选择或者切换。
    2）. 类的抽象以及他的视像都可以通过生成子类的方法加以扩充。这时bridge模式使你可以对不同的抽象接口
          和实现部分进行组合，并对他们进行扩充。
    3）. 对一个抽象的实现部分的修改应该对客户不产生影响，即客户的代码不需要重新编译。
    4）. 你想对客户完全隐藏抽象的实现部分。
    5）. 你想在多个实现间 共享实现，但同时要求客户并不知道这一点。