装饰模式：
	职责：动态的为一个对象增加新的功能
    　　　装饰器模式是一种用于代替继承的技术，无需通过继承增加子类就能扩展对象的新功能。使用对象的关联关系代替继承关系，更加灵活，同时避免类型体系的快速膨胀。

    总结：
    　　装饰模式（Decorator）也叫包装器模式（Wrapper）
    　　装饰模式降低系统的耦合度，可以动态的增加或删除对象的职责，并使得需要装饰的具体构建类和具体装饰类可以独立变化，以便增加新的具体构建类和具体装饰类。
    　　优点：
            扩展对象功能，比继承灵活，不会导致类个数急剧增加
            可以对一个对象进行多次装饰，创造出不同行为的组合，得到功能更加强大的对象
            具体构建类和具体装饰类可以独立变化，用户可以根据需要自己增加新的具体构件子类和具体装饰子类
    　　缺点：
            产生很多小对象。大量小对象占据内存，一定程度上影响性能
            装饰模式易于出错，调试排查比较麻烦

    装饰模式和桥接模式的区别：
    两个模式都是为了解决过多子类对象问题。但他们的诱因不一样。桥接模式是对象自身现有机制沿着多个维度变化，是既有部分不稳定。装饰模式是为了增加新的功能。

