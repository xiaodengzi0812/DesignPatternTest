模板方法模式:

父类定义一个方法执行的模板顺序,其中有父类的实现方法,也有空方法(传说中的钩子操作

),其空方法可以让继承它的子类去实现


模板方法模式中的方法
　　模板方法中的方法可以分为两大类：模板方法和基本方法。

　　模板方法
　　一个模板方法是定义在抽象类中的，把基本操作方法组合在一起形成一个总算法或一

个总行为的方法。

　　一个抽象类可以有任意多个模板方法，而不限于一个。每一个模板方法都可以调用任

意多个具体方法。

　　基本方法
　　基本方法又可以分为三种：抽象方法(Abstract Method)、具体方法(Concrete 

Method)和钩子方法(Hook Method)。

　　●　　抽象方法：一个抽象方法由抽象类声明，由具体子类实现。在Java语言里抽象

方法以abstract关键字标示。

　　●　　具体方法：一个具体方法由抽象类声明并实现，而子类并不实现或置换。

　　●　　钩子方法：一个钩子方法由抽象类声明并实现，而子类会加以扩展。通常抽象

类给出的实现是一个空实现，作为方法的默认实现。

　　在上面的例子中，AbstractTemplate是一个抽象类，它带有三个方法。其中

abstractMethod()是一个抽象方法，它由抽象类声明为抽象方法，
	并由子类实现；hookMethod()是一个钩子方法，它由抽象类声明并提供默认实现

，并且由子类置换掉。concreteMethod()是一个具体方法，
	它由抽象类声明并实现。

　　默认钩子方法
　　一个钩子方法常常由抽象类给出一个空实现作为此方法的默认实现。这种空的钩子方

法叫做“Do Nothing Hook”。
	显然，这种默认钩子方法在缺省适配模式里面已经见过了，一个缺省适配模式讲

的是一个类为一个接口提供一个默认的空实现，
	从而使得缺省适配类的子类不必像实现接口那样必须给出所有方法的实现，因为

通常一个具体类并不需要所有的方法。


系统的AsynTask就是一个非常好的模板方法设计模式，例子中我们自己写了一个自己的MyAsynTask

    public abstract class MyAsynTask {

        public void onPreExecute() {}

        public abstract Object doInBackground();

        public void onPostExecute(Object o) {}

        public void execute() {
            onPreExecute();
            Object obj = doInBackground();
            onPostExecute(obj);
        }
    }
